{"version":3,"sources":["components/toDoItem.jsx","components/toDolist.jsx","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","props","listItem","useState","title","setTitle","editMode","setEditMode","handleEdit","e","a","preventDefault","data","axios","put","id","res","console","log","className","onSubmit","type","autoFocus","value","onChange","target","style","textDecorationLine","completed","disabled","onClick","handleCheck","width","height","viewBox","fill","xmlns","fillRule","d","clipRule","handleDelete","ToDolist","state","toDolist","handleChange","currentTarget","name","Date","now","setState","index","findIndex","item","handleSubmit","post","err","filter","delete","get","this","mainToDoList","placeholder","map","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55464eca.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst ToDoItem = (props) => {\r\n  const { listItem } = props;\r\n  const [title, setTitle] = useState(listItem.title);\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const handleEdit = async (e) => {\r\n    e.preventDefault();\r\n    const data = listItem;\r\n    data.title = title;\r\n    try {\r\n      const res = await axios.put(\r\n        \"https://jsonplaceholder.typicode.com/todos/\" + listItem.id,\r\n        data\r\n      );\r\n      console.log(res.data, \"successfully changed\");\r\n      props.handleEdit(res.data);\r\n      setEditMode(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <li className='list-group-item todo-item'>\r\n      {!editMode ? (\r\n        <span\r\n          style={{\r\n            textDecorationLine: listItem.completed ? \"line-through\" : \"\",\r\n          }}\r\n        >\r\n          {listItem.title}\r\n        </span>\r\n      ) : (\r\n        <form onSubmit={handleEdit}>\r\n          <input\r\n            type='text'\r\n            className='form-control'\r\n            autoFocus\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </form>\r\n      )}\r\n      <div>\r\n        <button\r\n          type='button'\r\n          className={`btn btn-${listItem.completed ? \"\" : \"outline-\"}success`}\r\n          disabled={editMode}\r\n          onClick={() => props.handleCheck(listItem.id)}\r\n        >\r\n          âœ“\r\n        </button>\r\n        <button\r\n          type='button'\r\n          className={` btn btn-${editMode ? \"\" : \"outline-\"}primary ml-4`}\r\n          onClick={() => setEditMode(!editMode)}\r\n        >\r\n          <svg\r\n            className='bi bi-pencil'\r\n            width='1em'\r\n            height='1em'\r\n            viewBox='0 0 16 16'\r\n            fill='currentColor'\r\n            xmlns='http://www.w3.org/2000/svg'\r\n          >\r\n            <path\r\n              fillRule='evenodd'\r\n              d='M11.293 1.293a1 1 0 011.414 0l2 2a1 1 0 010 1.414l-9 9a1 1 0 01-.39.242l-3 1a1 1 0 01-1.266-1.265l1-3a1 1 0 01.242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z'\r\n              clipRule='evenodd'\r\n            />\r\n            <path\r\n              fillRule='evenodd'\r\n              d='M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 00.5.5H4v.5a.5.5 0 00.5.5H5v.5a.5.5 0 00.5.5H6v-1.5a.5.5 0 00-.5-.5H5v-.5a.5.5 0 00-.5-.5H3z'\r\n              clipRule='evenodd'\r\n            />\r\n          </svg>\r\n        </button>\r\n        <button\r\n          type='button'\r\n          className='btn btn-outline-danger ml-4'\r\n          onClick={() => props.handleDelete(listItem)}\r\n        >\r\n          X\r\n        </button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ToDoItem;\r\n","import React, { Component } from \"react\";\r\nimport \"./toDolist.css\";\r\nimport ToDoItem from \"./toDoItem\";\r\nimport axios from \"axios\";\r\n\r\nclass ToDolist extends Component {\r\n  state = {\r\n    toDolist: [],\r\n    data: { id: null, title: \"\", completed: false },\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const { data } = await axios.get(\r\n      \"https://jsonplaceholder.typicode.com/todos\"\r\n    );\r\n    console.log(data);\r\n    this.setState({ toDolist: data, mainToDoList: data });\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const data = { ...this.state.data };\r\n    data[e.currentTarget.name] = e.currentTarget.value;\r\n    data.id = Date.now();\r\n    this.setState({ data });\r\n  };\r\n\r\n  handleCheck = async (id) => {\r\n    const toDolist = this.state.toDolist;\r\n    const index = toDolist.findIndex((item) => item.id === id);\r\n    toDolist[index].completed = !toDolist[index].completed;\r\n    console.log(\"clicked\");\r\n\r\n    try {\r\n      const { data } = await axios.put(\r\n        \"https://jsonplaceholder.typicode.com/todos/\" + id,\r\n        toDolist[index]\r\n      );\r\n      console.log(data, \"successfully changed\");\r\n      toDolist[index] = data;\r\n      this.setState({ toDolist });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { data } = this.state;\r\n    if (data.title !== \"\") {\r\n      await axios.post(\"https://jsonplaceholder.typicode.com/todos/\", data);\r\n      try {\r\n        console.log(\"successfully added\");\r\n        const toDolist = [data, ...this.state.toDolist];\r\n        this.setState({ toDolist, data: { title: \"\", id: null } });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  handleDelete = async (listItem) => {\r\n    const toDolist = this.state.toDolist.filter(\r\n      (item) => item.id !== listItem.id\r\n    );\r\n    try {\r\n      await axios.delete(\r\n        \"https://jsonplaceholder.typicode.com/todos/\" + listItem.id\r\n      );\r\n      console.log(\"successfully deleted\");\r\n      this.setState({ toDolist });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  handleEdit = (listItem) => {\r\n    const toDolist = this.state.toDolist;\r\n    const index = toDolist.findIndex((item) => item.id === listItem.id);\r\n    toDolist[index] = listItem;\r\n    this.setState({ toDolist });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={(e) => this.handleSubmit(e)} className='add-item-form'>\r\n          <input\r\n            value={this.state.data.title}\r\n            name='title'\r\n            className='form-control'\r\n            type='text'\r\n            placeholder='Add to do item'\r\n            onChange={this.handleChange}\r\n          />\r\n          <button\r\n            disabled={this.state.data.title === \"\"}\r\n            className='btn btn-primary ml-3'\r\n          >\r\n            ADD\r\n          </button>\r\n        </form>\r\n        <ul className='list-group mt-4'>\r\n          {this.state.toDolist.map((listItem) => (\r\n            <ToDoItem\r\n              key={listItem.id}\r\n              listItem={listItem}\r\n              handleCheck={this.handleCheck}\r\n              handleDelete={this.handleDelete}\r\n              handleEdit={this.handleEdit}\r\n            />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ToDolist;\r\n","import React from 'react';\nimport ToDolist from './components/toDolist'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1>\n        To Do list\n      </h1>\n      <ToDolist/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}